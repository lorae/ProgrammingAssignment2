read.csv(~/Documents/Courses/DataScience/hw1_data.csv, header = TRUE)
?working directory
?workingdirectory
??workingdirectory
read.csv(/c/Users/stojanovl/Documents/Courses/DataScience/hw1_data.csv, header = TRUE)
read.csv(C:\Users\stojanovl\Documents\Courses\DataScience\hw1_data.csv, header = TRUE)
read.csv(file = C:/Users/stojanovl/Documents/Courses/DataScience/hw1_data.csv, header = TRUE)
read.csv(file = C:\Users\stojanovl\Documents\Courses\DataScience\hw1_data.csv, header = TRUE)
read.csv(file = "/c/Users/stojanovl/Documents/Courses/DataScience/hw1_data.csv", colClasses = TRUE)
read.csv(file = "~/Documents/Courses/DataScience/hw1_data.csv", colClasses = TRUE)
read.csv(file = "~/Documents/Courses/Data Science/hw1_data.csv", colClasses = TRUE)
read.csv(file = "~/Courses/Data Science/hw1_data.csv", colClasses = TRUE)
read.csv(file = "~/Courses/Data Science/hw1_data.csv")
data <-
read.csv(file = "~/Courses/Data Science/hw1_data.csv")
?data framew
?dataframe
??dataframe
data[col = 1]
data
data[1]
data[1,]
data[c(1:2),]
nrow(data)
data[c(152:153),]
data[47, "Ozone"]
sum(is.na[data("Ozone")])
sum(is.na(data["Ozone"]))
mean(data["Ozone"])
mean(data["Ozone"], na.rm = TRUE)
data[Ozone]
data["Ozone"]
mean(data["Ozone"], na.rm=T)
mean(data["Ozone"])
?lapply
lapply(data, class)
data$Ozone <- as.numeric
data$Ozone <- as.numeric($Ozone)
data$Ozone <- as.numeric(data$Ozone)
mean(data$Ozone, na.rm=T)
data$Temp <- as.numeric(data$Temp)
extract <- data["Ozone" > 31, "Temp" > 90]
extract
?subset
extract <- subset(data, "Ozone" > 31 & "Temp" > 90)
extract
extract <- subset(data, "Ozone" > 31 & "Temp" > 90)
extract
extract <- subset(data, Ozone > 31 & Temp > 90)
extract
mean(extract$Solar.R, na.rm = T)
extract1 <- subset(data, Month = 6)
extract1
extract1 <- subset(data, Month == 6)
extract 1
extract1
mean(extract1$Temp, na.rm = T)
extract2 <- subset(data, Month == 5)
extract2
?max
max(extract2$Ozone, na.rm = T)
name <- "foo"
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[[name]]    # computed index for "foo"
x$name       # element "name" does not exist!
x$foo        # element "foo" does exist
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1,3)]]
x[[c(1,2)]
]
x[[2]][[1]]
x[[2]][[2]]
x <- matrix(1:6, 2, 3)
x
x[1,2]
x[2,3]
x[1, ]
x[ ,2]
x[2, ]
x <- matrix(1:8, 2, 5)
x
x <-matrix(1:6, 2, 3)
x[1,2]
x[1,2, drop = FALSE]
x <- matrix(1:6, 2, 3)
x[1, ]
x[1, drop = FALSE]
x <- matrix(1:6, 2, 3)
x[1, ]
x[1, , drop = FALSE]
x <- list(aardvark = 1:5)
x$a                # partial matching- aardvark is the element that moost closely matches "a"
x <- list(aardvark = 1:5)
x$a                # partial matching- "aardvark" is the element that most closely matches "a"
x[["a"]]
x[["a", exact = FALSE]]  # tells computer that match does not need to be exact
x <- list(aardvark = 1:5)
x[["a"]]                 # partial matching- "aardvark" is the element that most closely matches "a"
x <- list(aardvark = 1:5)
x$a                      # partial matching- "aardvark" is the element that most closely matches "a"
x[["a"]]
x[["a", exact = FALSE]]  # tells computer that match does not need to be exact
x <- c(1, 2, NA, 4, NA, 6)
bad <- is.na(x)
x[!bad]
x <- c(1, 2, NA, 4, NA, 6)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x, y)
good
x[good]
y[good]
airquality <- read.csv("~/Courses/Data Science/hw1_data.csv")
airquality[1:6, ]
good <- complete.cases(airquality)
airquality[good, ][1:6, ]
x <- 1:4, y <- 6:9
x <- 1:4; y <- 6:9
x + y
x > 2
x >= 2
y == 8
x * y
x / y
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
x
y
x * y           ## element-wise multiplication
x / y
x %*% y         ## true matrix multiplication
z = 14
if(z == 15)
{}
logical <- if(z == 15) {}
logical
logical <- if(z == 14) {}
logical
for(i in 1:10) {}
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
?rbinom
add2 <- function(x, y) {
x + y
}
add2(3,5)
add2(10,34562)
View(x)
View(x)
View(airquality)
View(airquality)
add2 <- function(x, y) {
x + y
}
add2(123456, 234567)
add2(1029384756, 918273645)
above <- function(x, n) {
use <- x > n
x[use]
}
above(c(1:100), 52)
above(1:100)
source('~/.active-rstudio-document')
above(1:100)
above(1:100, 86)
source('~/.active-rstudio-document')
columnmean(airquality)
airquality
columnmean(airquality)
source('~/.active-rstudio-document')
columnmean(airquality)
args(lm)
args(paste)
args(cat)
x <- 1
x
msg <- "hello"
msg
x <- ##incomplete expression
hi
hi <- 1
x
hi <- 4
x
x <- 1:20
x
x <- matrix(1:20)
x
x <- matrix(5, 4, 1:20)
x
x <- matrix(1:20, 5, 4)
x
?matrix
x <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = TRUE, dimnames = c("orange", "apple"))
x <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = TRUE, dimnames = list("orange", "apple"))
?list
x <- list("apple, orange")
x <- list("apple", "orange")
x
y <- matrix(data = 1:20, nrow = 5, ncol = 4, byrow = TRUE, dimnames = x)
y <- matrix(data = 1:20, nrow = 5, ncol = 4, byrow = TRUE)
y
?vector
c <- vector(length = 20, 1:20)
c <- vector(length = 20, x = 1:20)
c <- vector(1:20)
c <- vector(1, 2, 3, 4, 5)
attributes(x)
x <- c(0.5, 0.6, 1L, 1+2i)
x
x <- vector(mode = "numeric", length = 30, 1:20)
x <- vector(mode = "numeric", length = 30)
x
x[[1]] <- 3
x
x[[5]] <- "hi"
x
as.vector(x, mode = "numeric")
x[[5]] <- 5
x
x <- c(0:6)
as.numeric(x)
as.logical(x)
as.numeric(x)
x
as.logical(x)
x
x <- as.logical(x)
x
as.numeric(x)
x <- list("abracadabra", 16+43i, 9L, 4.65, TRUE)
x
x <- matrix(data = 1:20, nrow = 5, ncol = 4, byrow + TRUE, dimnames = pairlist(""rows", "columns""))
z <- pairlist("a", "b")
z
z <- pairlist("a", "b", "c", "d")
z
x <- matrix(data = 1:20, nrow = 5, ncol = 4, byrow - TRUE)
x <- matrix(data = 1:20, nrow = 5, ncol = 4, byrow = TRUE)
x
attributes(x)
dim(x)
a <- 1:3
b <- 10:12
cbind(a,b)
cbind(b,a)
rbind(a,b)
rbind(b,a)
x <- factor(c("yes", "yes", "yes", "no", "no", "yes", "no", "yes"))
x
table(x)
unclass(x)
x <- factor(levels = c("yes", "no"), c("yes", "yes", "yes", "no", "yes", "no", "yes", "yes", "no"))
x
table(x)
unclass(x)
x <- vector(mode = "numeric", length = 10)
x[[5]] = TRUE
x[[7]] = FALSE
x
x[[1]] = "hello"
x
as.numeric(x)
is.na(x)
is.na(as.numeric(x))
read.csv(file = ~/Courses/Data Science/R Programming/CollegeTuition.csv)
read.csv(file = ~\Courses\Data Science\R Programming\CollegeTuition.csv)
read.csv("~\Courses\Data Science\R Programming\CollegeTuition.csv")
read.csv("~/Courses/Data Science/R Programming/CollegeTuition.csv")
CTuition <- data.frame(read.csv("~/Courses/Data Science/R Programming/CollegeTuition.csv"))
CTuition
data.matrix(CTuition)
hw1_data <- data.frame(read.csv("~/Courses/Data Science/R Programming/hw1_data.csv"))
hw1_data
nrow(CTuition)
ncol(CTuition)
nrow(hw1_data)
ncol(hw1_data)
names(CTuition)
names(hw1_data)
dput(CTuition)
dput(CTuition, file = CollegeTuition.R)
dput(CTuition, file = "~/Courses/Data Science/R Programming/CTuition.R")
dget(CTuition.R)
dget("CTuition.R")
dget("~/Courses/Data Science/R Programming/CTuition.R")
dput(hw1_data, file = "~/Courses/Data Science/R Programming/hw1_data.R")
dget("~/Courses/Data Science/R Programming/hw1_data.R")
con <- file("~/Courses/Data Science/R Programming/Greetings.txt")
x <- readLines(con, 2)
x
x
x <- readlines(con, 4)
x <- readLines(con, 4)
x
readLines(hw1_data, 10)
x <- dput(hw1_data)
x <- dget(hw1_data)
hw1_data <- dget("~/Courses/Data Science/R Programming/hw1_data.R")
hwi_data
hw1_data
x <- hw1_data[[1:10]]
x <- hw1_data[1:10]
x <- hw1_data[, 10]
x <- hw1_data$10
hw1_data[1]
hw1_data[1:3]
hw1_data[x > 30]
hw1_data[[1]]
hw1_data[, 1]
hw1_data[[]][[3]]
x <- hw1_data
x[1,2]
x[, 2]
x[1,]
x[1:10,]
x[[1:10,]]
x[[3,]]
x[1:10, , drop = FALSE]
x[3, , drop = FALSE]
x[3,]
x[3,4]
x[3, 4, drop = FALSE]
source('~/.active-rstudio-document')
add2(6, 7)
x <- "pie"
x
readLines("http://google.com")
readLines("http://iamawesome.com")
dput(CTuition, file = "~/Courses/Data Science/R Programming/CTuition.R")
demo(graphics)
q()
demo(ggplot2)
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
#--Load previously saved data:
path <- "http://www.sr.bham.ac.uk/~ajrs/R/datasets"
a <- load(url(paste(path,"middayweather.RData", sep="/")))
close(url(paste(path,"middayweather.RData", sep="/")))
print(a)	# list names of saved objects
#--Load extra libraries:
require(lattice)
#--The following was used to define the colours, but since it's a non-standard
#   package, I've used the hexadecimal colour codes explicity below to avoid the
#   need to install "RColorBrewer". See http://colorbrewer2.org/ for more info.
#require(RColorBrewer)
#colset <- brewer.pal(5, "Set1")
#--Change output device to pdf file:
trellis.device(device="pdf", file="midday_weather_profiles.pdf", height=11,
width=7.5, color=TRUE)
#--Define plot titles:
lab.wind.speed <- "Wind speed (mph)"
lab.hum <- "Humidity (%)"
lab.rain <- "Rainfall (mm/day, averaged over a week)"
lab.bar <- "Air pressure (mb)"
lab.T.out <- as.expression(expression( paste("Outside temperature (", degree*C, ")") ))
#--Custom strip function:
# (NB the colour used is the default lattice strip background colour)
my.strip <- function(which.given, which.panel, ...) {
strip.labels <- c(lab.wind.speed, lab.hum, lab.rain, lab.bar, lab.T.out)
panel.rect(0, 0, 1, 1, col="#ffe5cc", border=1)
panel.text(x=0.5, y=0.5, adj=c(0.5, 0.55), cex=0.95,
lab=strip.labels[which.panel[which.given]])
}
#--Define X axis date range:
xlim <- range(middayweather$Date)
#--Define annual quarters for plot grid line markers:
d <- seq(from=as.Date("2006-01-01"), to=as.Date("2011-01-01"), by=365/4)
#--Define colours for raw & smoothed data:
col.raw <- "#377EB8"	#colset[2] } see note above
col.smo <- "#E41A1C"	#colset[1] }
col.lm <- "grey20"
#--Create multipanel plot:
xyplot(wind.speed + hum.out + rain + bar + T.out ~ Date, data=middayweather,
scales=list(y="free", rot=0), xlim=xlim,
strip=my.strip, outer=TRUE, layout=c(1, 5, 1), ylab="",
panel=function(x, y, ...) {panel.grid(h=-1, v=0)	# plot default horizontal gridlines
panel.abline(v=d, col="grey90") # custom vertical gridlines
panel.xyplot(x, y, ..., type="l", col=col.raw, lwd=0.5) # raw data
panel.loess(x, y, ..., col=col.smo, span=0.14, lwd=0.5) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=1) # median value
},
key=list(text=list(c("raw data", "smoothed curve", "median value")),
title="Birmingham Wast Hills Observatory average midday weather",
col=c(col.raw, col.smo, col.lm), lty=c(1, 1, 2),
columns=2, cex=0.95,
lines=TRUE
),
)
#--Ensure device finishes cleanly:
dev.off()
#--Load previously saved data:
path <- "http://www.sr.bham.ac.uk/~ajrs/R/datasets"
a <- load(url(paste(path,"middayweather.RData", sep="/")))
close(url(paste(path,"middayweather.RData", sep="/")))
print(a)	# list names of saved objects
#--Load extra libraries:
require(lattice)
#--The following was used to define the colours, but since it's a non-standard
#   package, I've used the hexadecimal colour codes explicity below to avoid the
#   need to install "RColorBrewer". See http://colorbrewer2.org/ for more info.
#require(RColorBrewer)
#colset <- brewer.pal(5, "Set1")
#--Change output device to pdf file:
trellis.device(device="pdf", file="midday_weather_profiles.pdf", height=11,
width=7.5, color=TRUE)
#--Define plot titles:
lab.wind.speed <- "Wind speed (mph)"
lab.hum <- "Humidity (%)"
lab.rain <- "Rainfall (mm/day, averaged over a week)"
lab.bar <- "Air pressure (mb)"
lab.T.out <- as.expression(expression( paste("Outside temperature (", degree*C, ")") ))
#--Custom strip function:
# (NB the colour used is the default lattice strip background colour)
my.strip <- function(which.given, which.panel, ...) {
strip.labels <- c(lab.wind.speed, lab.hum, lab.rain, lab.bar, lab.T.out)
panel.rect(0, 0, 1, 1, col="#ffe5cc", border=1)
panel.text(x=0.5, y=0.5, adj=c(0.5, 0.55), cex=0.95,
lab=strip.labels[which.panel[which.given]])
}
#--Define X axis date range:
xlim <- range(middayweather$Date)
#--Define annual quarters for plot grid line markers:
d <- seq(from=as.Date("2006-01-01"), to=as.Date("2011-01-01"), by=365/4)
#--Define colours for raw & smoothed data:
col.raw <- "#377EB8"	#colset[2] } see note above
col.smo <- "#E41A1C"	#colset[1] }
col.lm <- "grey20"
#--Create multipanel plot:
xyplot(wind.speed + hum.out + rain + bar + T.out ~ Date, data=middayweather,
scales=list(y="free", rot=0), xlim=xlim,
strip=my.strip, outer=TRUE, layout=c(1, 5, 1), ylab="",
panel=function(x, y, ...) {panel.grid(h=-1, v=0)	# plot default horizontal gridlines
panel.abline(v=d, col="grey90") # custom vertical gridlines
panel.xyplot(x, y, ..., type="l", col=col.raw, lwd=0.5) # raw data
panel.loess(x, y, ..., col=col.smo, span=0.14, lwd=0.5) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=1) # median value
},
key=list(text=list(c("raw data", "smoothed curve", "median value")),
title="Birmingham Wast Hills Observatory average midday weather",
col=c(col.raw, col.smo, col.lm), lty=c(1, 1, 2),
columns=2, cex=0.95,
lines=TRUE
),
)
#--Ensure device finishes cleanly:
remove(list=ls())
getwd()
setwd("C:/Users/stojanovl/Desktop/R/ProgrammingAssignment2")
getwd()
load("cachematrix.R")
cacheSolve <- function(x, ...) {
# retrieving m
m <- x$getinv()
# checking if m is cached
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
# calculating inverse
m <- solve(data, ...)
# altering the "setinv" entry in list from makeCacheMatrix
x$setinv(m)
m
}
x <- rnorm(4)
makeCacheMatrix <- function(x = matrix()) {
# initializing m
m <- NULL
set <- function(y) {
x <<- y
# nothing is cached yet
m <<- NULL
}
# used in other function to retrieve the unaltered matrix
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
# the list that provides variables needed for cacheSolve
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(x)
x <- matrix(x, 2, 2)
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
set(x)
y <- makeCacheMatrix(x)
y$set(x)
makeCacheMatrix(x)
cacheSolve(x)
y$set(x)
y$set(x)
test <- y$set(x)
test
